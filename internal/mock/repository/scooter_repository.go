// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/scooter_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "main/internal/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockScooterRepository is a mock of ScooterRepository interface.
type MockScooterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScooterRepositoryMockRecorder
}

// MockScooterRepositoryMockRecorder is the mock recorder for MockScooterRepository.
type MockScooterRepositoryMockRecorder struct {
	mock *MockScooterRepository
}

// NewMockScooterRepository creates a new mock instance.
func NewMockScooterRepository(ctrl *gomock.Controller) *MockScooterRepository {
	mock := &MockScooterRepository{ctrl: ctrl}
	mock.recorder = &MockScooterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScooterRepository) EXPECT() *MockScooterRepositoryMockRecorder {
	return m.recorder
}

// FindScootersByArea mocks base method.
func (m *MockScooterRepository) FindScootersByArea(latitudeStart, longitudeStart, latitudeEnd, longitudeEnd int) []model.Scooter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScootersByArea", latitudeStart, longitudeStart, latitudeEnd, longitudeEnd)
	ret0, _ := ret[0].([]model.Scooter)
	return ret0
}

// FindScootersByArea indicates an expected call of FindScootersByArea.
func (mr *MockScooterRepositoryMockRecorder) FindScootersByArea(latitudeStart, longitudeStart, latitudeEnd, longitudeEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScootersByArea", reflect.TypeOf((*MockScooterRepository)(nil).FindScootersByArea), latitudeStart, longitudeStart, latitudeEnd, longitudeEnd)
}

// GetByScooterId mocks base method.
func (m *MockScooterRepository) GetByScooterId(scooterId uuid.UUID) (model.Scooter, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByScooterId", scooterId)
	ret0, _ := ret[0].(model.Scooter)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByScooterId indicates an expected call of GetByScooterId.
func (mr *MockScooterRepositoryMockRecorder) GetByScooterId(scooterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByScooterId", reflect.TypeOf((*MockScooterRepository)(nil).GetByScooterId), scooterId)
}

// UpdateScooterCoordinatesByScooterId mocks base method.
func (m *MockScooterRepository) UpdateScooterCoordinatesByScooterId(scooterId uuid.UUID, latitude, longitude int, time time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScooterCoordinatesByScooterId", scooterId, latitude, longitude, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScooterCoordinatesByScooterId indicates an expected call of UpdateScooterCoordinatesByScooterId.
func (mr *MockScooterRepositoryMockRecorder) UpdateScooterCoordinatesByScooterId(scooterId, latitude, longitude, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScooterCoordinatesByScooterId", reflect.TypeOf((*MockScooterRepository)(nil).UpdateScooterCoordinatesByScooterId), scooterId, latitude, longitude, time)
}
