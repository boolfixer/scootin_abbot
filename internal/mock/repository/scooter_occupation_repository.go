// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/scooter_occupation_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "main/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockScooterOccupationRepository is a mock of ScooterOccupationRepository interface.
type MockScooterOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScooterOccupationRepositoryMockRecorder
}

// MockScooterOccupationRepositoryMockRecorder is the mock recorder for MockScooterOccupationRepository.
type MockScooterOccupationRepositoryMockRecorder struct {
	mock *MockScooterOccupationRepository
}

// NewMockScooterOccupationRepository creates a new mock instance.
func NewMockScooterOccupationRepository(ctrl *gomock.Controller) *MockScooterOccupationRepository {
	mock := &MockScooterOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockScooterOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScooterOccupationRepository) EXPECT() *MockScooterOccupationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScooterOccupationRepository) Create(scooterId, userId uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", scooterId, userId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScooterOccupationRepositoryMockRecorder) Create(scooterId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScooterOccupationRepository)(nil).Create), scooterId, userId)
}

// DeleteByScooterIdAndUserId mocks base method.
func (m *MockScooterOccupationRepository) DeleteByScooterIdAndUserId(scooterId, userId uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByScooterIdAndUserId", scooterId, userId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteByScooterIdAndUserId indicates an expected call of DeleteByScooterIdAndUserId.
func (mr *MockScooterOccupationRepositoryMockRecorder) DeleteByScooterIdAndUserId(scooterId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByScooterIdAndUserId", reflect.TypeOf((*MockScooterOccupationRepository)(nil).DeleteByScooterIdAndUserId), scooterId, userId)
}

// GetByScooterIdAndUserId mocks base method.
func (m *MockScooterOccupationRepository) GetByScooterIdAndUserId(scooterId, userId uuid.UUID) (model.ScooterOccupation, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByScooterIdAndUserId", scooterId, userId)
	ret0, _ := ret[0].(model.ScooterOccupation)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByScooterIdAndUserId indicates an expected call of GetByScooterIdAndUserId.
func (mr *MockScooterOccupationRepositoryMockRecorder) GetByScooterIdAndUserId(scooterId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByScooterIdAndUserId", reflect.TypeOf((*MockScooterOccupationRepository)(nil).GetByScooterIdAndUserId), scooterId, userId)
}
